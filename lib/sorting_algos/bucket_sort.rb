# sorts an array of values
#
# consistent with the other non-comparison algorithms I've looked at, the performance is linear time but you need to
# make assumptions about your input values. Counting Sort assumed that the values had a small range - Bucket Sort
# assumes that the input is generated by a random process, and therefore has a uniform distribution of values.
#
# So, you make a bunch of buckets, drop stuff in the buckets, and then insertion sort them then add together.
# Sounds dumb, right? Yep :D
#
# PERFORMANCE: O(n + k) average, O(n^2) worst

require_relative 'insertion_sort'

def bucket_sort(array)



end
